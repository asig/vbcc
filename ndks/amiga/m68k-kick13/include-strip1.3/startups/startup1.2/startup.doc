
STARTUP.DOC:  1.2 ASTARTUP.OBJ AND TWSTARTUP.OBJ

1. ASTARTUP.ASM/OBJ

   The Astartup code is a replacement for the 1.1 version of Astartup.
   This is NOT a replacement for Lstartup.obj (also know as "c.o").
   (Lstartup contains many additional variables required by LC.lib)

   The fixes in this version are described in the source comments.
   The major change is that parsing of command line parameters,
   especially quoted parameters, is now done in a manner more
   consistent with the parsing done by the BCPL CLI commands.


   FOR THOSE OF YOU WHO HAVE NEVER USED ASTARTUP:

   Amiga/MCC assembler programs and many Amiga/Lattice C programs
   can be linked with Astartup.obj.  The Astartup code sets up
   _DOSBase and _SysBase (required by Amiga.lib), sets up Amiga
   stdio (for use with Amiga.lib's abbreviated stdio functions),
   and provides a consistent interface for receiving command line
   and Workbench arguments.  The arguments are passed to "main"
   in standard C fashion, as argc and argv (longs) on the stack.

       main(argc,argv)
       int argc;
       char **argv;
          {

   If the program is started from CLI, argc is non-zero and is
   equal to the number of command line args including the name
   of the program itself.  Argv is an array of pointers to the
   null terminated argument strings.

   Example command line:  myprogram file1 file2
                          argc = 3
                          argv[0] = "myprogram"
                          argv[1] = "file1"
                          argv[2] = "file2"

   If the program is started from Workbench, argc will be zero, and
   the pointer _WBenchMsg defined in Astartup will point to a
   WBStartup structure containing the names and locks of the program
   and any WBargs passed via extend select or default tool.
   (in C, extern struct WBStartup *WBenchMsg;  in asm, XREF _WBenchMsg)

   Note that unlike Lstartup (c.o), Astartup does NOT open a default
   stdio window when a program is started from Workbench.  If your
   code needs an Amiga stdio window when started from Workbench,
   also see the information below on TWstartup.obj.


   USING ASTARTUP WITH AMIGA/MCC ASSEMBLER PROGRAMS:

   Assembler programs that accept command line or Workbench arguments
   can use the Astartup code for a consistent system interface.
   The entry point of the assembler program must be named _main:
   and this label must be XDEF'd.  When linking, put Astartup.obj
   before your .obj.


   USING ASTARTUP WITH AMIGA/LATTICE C PROGRAMS:

   Many Amiga C programs call mostly Amiga system functions and use
   very few LC.lib functions.  Such programs can often be linked with
   Astartup.obj and with Amiga.lib first to produce a smaller executable.
   Any C code to be linked this way must be compiled with the -v flag
   on the second pass (LC2) of the compiler.  This disables the
   insertion of Lattice stack checking code which would reference two
   variables in Lstartup (_base and _xcovf).  Any other unresolved
   external references are caused by using LC.lib functions which
   depend on Lstartup.

   In general, if your program does not use Lattice file IO functions
   or Lattice floating point, you may be able to link with Astartup.
   Amiga stdio (AmigaDOS filehandles stdin, stdout, stderr) are set
   up by Astartup, and Amiga.lib contains a number of abbreviated
   file IO and stdio functions for use with AmigaDos filehandles.
   See the Addison Wesley Rom Kernel manual "Exec" for a description
   of the C-support functions in Amiga.lib.  They include a printf()
   and a getchar().  The printf() does not do floating point and it
   seems to want %lc instead of %c for character formatting.

   By linking LC.lib after Amiga.lib, certain functions such as
   string functions and non-power-of-two integer math can be picked
   up from LC.lib without requiring Lstartup.

   If you want to use Astartup's stdio handles in your code:
      (in C)  extern LONG stdin, stdout, stderr;
      (in assembler)
              XREF _stdin
              XREF _stdout
              XREF _stderr

   Remember that unless you use TWstartup (below) you have NO stdio
   if your program is started from Workbench.

   To use Astartup, don't #include <lattice/stdio>, compile your
   code with the -v flag on LC2, and link in this order:

   Astartup.obj, your.o ... LIBRARY Amiga.lib, LC.lib


2. TWSTARTUP.ASM/OBJ

   The TWstartup code is a revised Astartup which can open an Amiga
   stdio window when a program is started from Workbench.  The
   CON: spec for the window is defined in YOUR code, so you can
   easily modify the placement, size, and title of the window.
   By defining it as a null string (""), you can suppress the
   opening of the window.

    In C:
     Above main() in your code:
      
              char TWspec[] = "CON:0/0/640/200/Test"; /* full window */
         OR   char TWspec[] = "";                     /* no window   */

     and if you want to use the stdio handles directly:
              extern LONG stdin, stdout, stderr;

    In assembler: (should work this way - haven't tried it)
     Above your _main:

              XDEF _main
              XDEF _TWspec

              XREF _stdin       <--- Add these if you want direct
              XREF _stdout           access to the stdio handles
              XREF _stderr

     And one of these (for window or no window) in your DATA section:

     _TWspec  DC.B  'CON:0/0/640/200/Test',0
     _TWspec  DC.B  0


   Astartup programs which use stdio (printf(), getchar(), etc.) can
   easily be modified for Workbench startup using TWstartup.
   The only modifications required in the application are usually:

      - Set a flag to let you know you started from WorkBench (argc==0)
           BOOL fromWB;
           fromWB = (argc==0) ? TRUE : FALSE;

      - If you exit with an error message and started fromWB,
        do something like printf("PRESS RETURN TO EXIT") and
        wait for the user before exiting.  Otherwise the exit
        code in TWstartup will close the stdio window before
        the user can read your error message.

      - If your program accepts command line flags or filenames,
        you must add code to check for WBArgs passed via WBenchMsg
        and if you wish, flags passed in the Tooltypes array of
        your program's icon.


   The TWstartup code is also valuable for printf() debugging of
   Workbench programs that do not normally use use stdio



